// ------------------------------------------------------------------
// DO NOT EDIT THIS FILE DIRECTLY
// ------------------------------------------------------------------
// This file is generated by the "ruby_wrapper.rb" script in
// the Scripts/ directory. Any changes made here will be overwritten.
// ------------------------------------------------------------------

using System;
using System.Runtime.InteropServices;
using System.Text;

namespace RubyPInvoke
{
   // Considered, and tried, SWIG to generate this wrapper.
   // The result were undesirable. PInvoke offers some nice
   // features, like translating ref parameters -> pointer
   // arguments, delegates -> function pointers, etc. The
   // interface generated by SWIG out of the box was not so
   // friendly. Rather than tediously maintaining SWIG
   // input files, I've decided - for now - to tedious
   // maintain this PInvoke wrapper.
   //
   // The contents here are generated by a custom script
   // (Scripts/scrape_headers.rb)

   public delegate IntPtr Callback(IntPtr ptr);
   public delegate void UnblockingFunction(IntPtr ptr);

   public unsafe class RubyWrapper
   {
      // Can't determine a way to specify the DLL name dynamically.
      // May have to have separate versions of this library for each
      // ruby DLL.
      //
      // Possible work-arounds
      //
      // - Installer finds & renames compatible DLLs
      // - Generate multiple Wrapper classes from a single master,
      //   and select the wrapper to delegate to at runtime.
      const string RUBY_DLL = "msvcrt-ruby200";

<% $functions_by_category.each do |category, functions| -%>

      // <%= category %>
      // <%= (['-'] * category.length).join('') %>
<%  functions.each do |function| -%>

      // <%= function[:return_type] %> <%= function[:name] %>(<%= function[:param_list].join(', ') %>)
      // Name:    <%= function[:name] %>
      // Params:  (<%= function[:param_list].join(', ') %>)
      // Return:  <%= function[:return_type] %>
      <%= "//" if function[:csharp_signature]['UNDEFINED'] %>[DllImport(RUBY_DLL)]
      <%= function[:csharp_signature]['UNDEFINED'] ? "// #{function[:csharp_signature]}" : function[:csharp_signature] %>;
<%  end -%>
<% end -%>
   }
}
